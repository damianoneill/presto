// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MefCommonCosIdentifier mef common cos identifier
// swagger:model mef.common.CosIdentifier
type MefCommonCosIdentifier struct {

	// This attribute denotes the Class of Service name that the CosIdentifier map to.
	CosName string `json:"cos-name,omitempty"`

	// This attribute represents the relationship between the CosIdentifier and the DespCosIdPac when the cosMappingType of EvcEndPoint or OvcEndPoint is DSCP and the cosName is not only for L2CP.
	DscpCosIDPac []*MefCommonDscpCosIDPac `json:"dscp-cos-id-pac"`

	// This attribute represents the relationship between the CosIdentifier and the BwpFlow, for ingress bandwidth profile per CoS Name.
	IngressBwpPerCos *MefCommonBwpFlow `json:"ingress-bwp-per-cos,omitempty"`

	// This attribute lists the L2CP Protocols that map to the Class of Service Name.
	L2cpProtocolList []*MefCommonTypesL2cpProtocol `json:"l2cp-protocol-list"`

	// This attribute represents the relationship between the CosIdentifier and the PcpCosIdPac  when the cosMappingType of EvcEndPoint or OvcEndPoint is PCP and the cosName is not only for L2CP.
	PcpCosIDPac *MefCommonPcpCosIDPac `json:"pcp-cos-id-pac,omitempty"`

	// This attribute represents the relationship between the CosIdentifier and the SepCosIdPac when the cosMappingType of EvcEndPoint or OvcEndPoint is END_POINT and the cosName is not only for L2CP.
	SepCosIDPac MefCommonSepCosIDPac `json:"sep-cos-id-pac,omitempty"`
}

// Validate validates this mef common cos identifier
func (m *MefCommonCosIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDscpCosIDPac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngressBwpPerCos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateL2cpProtocolList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePcpCosIDPac(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MefCommonCosIdentifier) validateDscpCosIDPac(formats strfmt.Registry) error {

	if swag.IsZero(m.DscpCosIDPac) { // not required
		return nil
	}

	for i := 0; i < len(m.DscpCosIDPac); i++ {
		if swag.IsZero(m.DscpCosIDPac[i]) { // not required
			continue
		}

		if m.DscpCosIDPac[i] != nil {
			if err := m.DscpCosIDPac[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dscp-cos-id-pac" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MefCommonCosIdentifier) validateIngressBwpPerCos(formats strfmt.Registry) error {

	if swag.IsZero(m.IngressBwpPerCos) { // not required
		return nil
	}

	if m.IngressBwpPerCos != nil {
		if err := m.IngressBwpPerCos.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingress-bwp-per-cos")
			}
			return err
		}
	}

	return nil
}

func (m *MefCommonCosIdentifier) validateL2cpProtocolList(formats strfmt.Registry) error {

	if swag.IsZero(m.L2cpProtocolList) { // not required
		return nil
	}

	for i := 0; i < len(m.L2cpProtocolList); i++ {
		if swag.IsZero(m.L2cpProtocolList[i]) { // not required
			continue
		}

		if m.L2cpProtocolList[i] != nil {
			if err := m.L2cpProtocolList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("l2cp-protocol-list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MefCommonCosIdentifier) validatePcpCosIDPac(formats strfmt.Registry) error {

	if swag.IsZero(m.PcpCosIDPac) { // not required
		return nil
	}

	if m.PcpCosIDPac != nil {
		if err := m.PcpCosIDPac.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pcp-cos-id-pac")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MefCommonCosIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MefCommonCosIdentifier) UnmarshalBinary(b []byte) error {
	var res MefCommonCosIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
