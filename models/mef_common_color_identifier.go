// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MefCommonColorIdentifier mef common color identifier
// swagger:model mef.common.ColorIdentifier
type MefCommonColorIdentifier struct {

	// This attribute determines which conditional package (among EVC/OVC End Point, PCP, DEI or DSCP) to be used as the Color Identifier.
	ColorFieldType MefCommonTypesColorFieldType `json:"color-field-type,omitempty"`

	// This attribute represents the relationship between the ColorIdentifier and the DscpColorIdPac (representing the choice that maps DSCP values to Color).
	DcspColorPac []*MefCommonDscpColorIDPac `json:"dcsp-color-pac"`

	// This attribute represents the relationship between the ColorIdentifier and the DeiColorIdPac (representing the choice that maps Vlan tag DEI to Color).
	DeiColorPac MefCommonDeiColorIDPac `json:"dei-color-pac,omitempty"`

	// This attribute represents the relationship between the ColorIdentifier and the PcpColorIdPac (representing the choice that maps Vlan tag PCPs to Color).
	PcpColorPac *MefCommonPcpColorIDPac `json:"pcp-color-pac,omitempty"`

	// This attribute represents the relationship between the ColorIdentifier and the SepColorIdPac (representing the choice that maps EVC End Point or OVC End Point to Color).
	SepColorPac *MefCommonSepColorIDPac `json:"sep-color-pac,omitempty"`
}

// Validate validates this mef common color identifier
func (m *MefCommonColorIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColorFieldType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcspColorPac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePcpColorPac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSepColorPac(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MefCommonColorIdentifier) validateColorFieldType(formats strfmt.Registry) error {

	if swag.IsZero(m.ColorFieldType) { // not required
		return nil
	}

	if err := m.ColorFieldType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("color-field-type")
		}
		return err
	}

	return nil
}

func (m *MefCommonColorIdentifier) validateDcspColorPac(formats strfmt.Registry) error {

	if swag.IsZero(m.DcspColorPac) { // not required
		return nil
	}

	for i := 0; i < len(m.DcspColorPac); i++ {
		if swag.IsZero(m.DcspColorPac[i]) { // not required
			continue
		}

		if m.DcspColorPac[i] != nil {
			if err := m.DcspColorPac[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dcsp-color-pac" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MefCommonColorIdentifier) validatePcpColorPac(formats strfmt.Registry) error {

	if swag.IsZero(m.PcpColorPac) { // not required
		return nil
	}

	if m.PcpColorPac != nil {
		if err := m.PcpColorPac.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pcp-color-pac")
			}
			return err
		}
	}

	return nil
}

func (m *MefCommonColorIdentifier) validateSepColorPac(formats strfmt.Registry) error {

	if swag.IsZero(m.SepColorPac) { // not required
		return nil
	}

	if m.SepColorPac != nil {
		if err := m.SepColorPac.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sep-color-pac")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MefCommonColorIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MefCommonColorIdentifier) UnmarshalBinary(b []byte) error {
	var res MefCommonColorIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
