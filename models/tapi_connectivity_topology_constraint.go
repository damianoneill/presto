// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiConnectivityTopologyConstraint tapi connectivity topology constraint
// swagger:model tapi.connectivity.TopologyConstraint
type TapiConnectivityTopologyConstraint struct {

	// none
	AvoidTopology []*TapiTopologyTopologyRef `json:"avoid-topology"`

	// none
	ExcludeLink []*TapiTopologyLinkRef `json:"exclude-link"`

	// none
	ExcludeNode []*TapiTopologyNodeRef `json:"exclude-node"`

	// none
	ExcludePath []*TapiPathComputationPathRef `json:"exclude-path"`

	// This is a loose constraint - that is it is unordered and could be a partial list
	IncludeLink []*TapiTopologyLinkRef `json:"include-link"`

	// This is a loose constraint - that is it is unordered and could be a partial list
	IncludeNode []*TapiTopologyNodeRef `json:"include-node"`

	// none
	IncludePath []*TapiPathComputationPathRef `json:"include-path"`

	// none
	IncludeTopology []*TapiTopologyTopologyRef `json:"include-topology"`

	// soft constraint requested by client to indicate the layer(s) of transport connection that it prefers to carry the service. This could be same as the service layer or one of the supported server layers
	PreferredTransportLayer []TapiCommonLayerProtocolName `json:"preferred-transport-layer"`
}

// Validate validates this tapi connectivity topology constraint
func (m *TapiConnectivityTopologyConstraint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvoidTopology(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncludeLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncludeNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncludePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncludeTopology(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredTransportLayer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiConnectivityTopologyConstraint) validateAvoidTopology(formats strfmt.Registry) error {

	if swag.IsZero(m.AvoidTopology) { // not required
		return nil
	}

	for i := 0; i < len(m.AvoidTopology); i++ {
		if swag.IsZero(m.AvoidTopology[i]) { // not required
			continue
		}

		if m.AvoidTopology[i] != nil {
			if err := m.AvoidTopology[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("avoid-topology" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiConnectivityTopologyConstraint) validateExcludeLink(formats strfmt.Registry) error {

	if swag.IsZero(m.ExcludeLink) { // not required
		return nil
	}

	for i := 0; i < len(m.ExcludeLink); i++ {
		if swag.IsZero(m.ExcludeLink[i]) { // not required
			continue
		}

		if m.ExcludeLink[i] != nil {
			if err := m.ExcludeLink[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exclude-link" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiConnectivityTopologyConstraint) validateExcludeNode(formats strfmt.Registry) error {

	if swag.IsZero(m.ExcludeNode) { // not required
		return nil
	}

	for i := 0; i < len(m.ExcludeNode); i++ {
		if swag.IsZero(m.ExcludeNode[i]) { // not required
			continue
		}

		if m.ExcludeNode[i] != nil {
			if err := m.ExcludeNode[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exclude-node" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiConnectivityTopologyConstraint) validateExcludePath(formats strfmt.Registry) error {

	if swag.IsZero(m.ExcludePath) { // not required
		return nil
	}

	for i := 0; i < len(m.ExcludePath); i++ {
		if swag.IsZero(m.ExcludePath[i]) { // not required
			continue
		}

		if m.ExcludePath[i] != nil {
			if err := m.ExcludePath[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exclude-path" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiConnectivityTopologyConstraint) validateIncludeLink(formats strfmt.Registry) error {

	if swag.IsZero(m.IncludeLink) { // not required
		return nil
	}

	for i := 0; i < len(m.IncludeLink); i++ {
		if swag.IsZero(m.IncludeLink[i]) { // not required
			continue
		}

		if m.IncludeLink[i] != nil {
			if err := m.IncludeLink[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("include-link" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiConnectivityTopologyConstraint) validateIncludeNode(formats strfmt.Registry) error {

	if swag.IsZero(m.IncludeNode) { // not required
		return nil
	}

	for i := 0; i < len(m.IncludeNode); i++ {
		if swag.IsZero(m.IncludeNode[i]) { // not required
			continue
		}

		if m.IncludeNode[i] != nil {
			if err := m.IncludeNode[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("include-node" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiConnectivityTopologyConstraint) validateIncludePath(formats strfmt.Registry) error {

	if swag.IsZero(m.IncludePath) { // not required
		return nil
	}

	for i := 0; i < len(m.IncludePath); i++ {
		if swag.IsZero(m.IncludePath[i]) { // not required
			continue
		}

		if m.IncludePath[i] != nil {
			if err := m.IncludePath[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("include-path" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiConnectivityTopologyConstraint) validateIncludeTopology(formats strfmt.Registry) error {

	if swag.IsZero(m.IncludeTopology) { // not required
		return nil
	}

	for i := 0; i < len(m.IncludeTopology); i++ {
		if swag.IsZero(m.IncludeTopology[i]) { // not required
			continue
		}

		if m.IncludeTopology[i] != nil {
			if err := m.IncludeTopology[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("include-topology" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiConnectivityTopologyConstraint) validatePreferredTransportLayer(formats strfmt.Registry) error {

	if swag.IsZero(m.PreferredTransportLayer) { // not required
		return nil
	}

	for i := 0; i < len(m.PreferredTransportLayer); i++ {

		if err := m.PreferredTransportLayer[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preferred-transport-layer" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiConnectivityTopologyConstraint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiConnectivityTopologyConstraint) UnmarshalBinary(b []byte) error {
	var res TapiConnectivityTopologyConstraint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
