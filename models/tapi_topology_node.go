// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiTopologyNode tapi topology node
// swagger:model tapi.topology.Node
type TapiTopologyNode struct {
	TapiCommonAdminStatePac

	TapiCommonCapacityPac

	TapiCommonGlobalClass

	TapiTopologyTransferCostPac

	TapiTopologyTransferIntegrityPac

	TapiTopologyTransferTimingPac

	// none
	AggregatedNodeEdgePoint []string `json:"aggregated-node-edge-point"`

	// none
	EncapTopology *TapiTopologyTopologyRef `json:"encap-topology,omitempty"`

	// none
	LayerProtocolName []TapiCommonLayerProtocolName `json:"layer-protocol-name"`

	// none
	NodeRuleGroup []*TapiTopologyNodeRuleGroup `json:"node-rule-group"`

	// none
	OwnedNodeEdgePoint []*TapiTopologyNodeEdgePoint `json:"owned-node-edge-point"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TapiTopologyNode) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TapiCommonAdminStatePac
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TapiCommonAdminStatePac = aO0

	// AO1
	var aO1 TapiCommonCapacityPac
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.TapiCommonCapacityPac = aO1

	// AO2
	var aO2 TapiCommonGlobalClass
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.TapiCommonGlobalClass = aO2

	// AO3
	var aO3 TapiTopologyTransferCostPac
	if err := swag.ReadJSON(raw, &aO3); err != nil {
		return err
	}
	m.TapiTopologyTransferCostPac = aO3

	// AO4
	var aO4 TapiTopologyTransferIntegrityPac
	if err := swag.ReadJSON(raw, &aO4); err != nil {
		return err
	}
	m.TapiTopologyTransferIntegrityPac = aO4

	// AO5
	var aO5 TapiTopologyTransferTimingPac
	if err := swag.ReadJSON(raw, &aO5); err != nil {
		return err
	}
	m.TapiTopologyTransferTimingPac = aO5

	// AO6
	var dataAO6 struct {
		AggregatedNodeEdgePoint []string `json:"aggregated-node-edge-point"`

		EncapTopology *TapiTopologyTopologyRef `json:"encap-topology,omitempty"`

		LayerProtocolName []TapiCommonLayerProtocolName `json:"layer-protocol-name"`

		NodeRuleGroup []*TapiTopologyNodeRuleGroup `json:"node-rule-group"`

		OwnedNodeEdgePoint []*TapiTopologyNodeEdgePoint `json:"owned-node-edge-point"`
	}
	if err := swag.ReadJSON(raw, &dataAO6); err != nil {
		return err
	}

	m.AggregatedNodeEdgePoint = dataAO6.AggregatedNodeEdgePoint

	m.EncapTopology = dataAO6.EncapTopology

	m.LayerProtocolName = dataAO6.LayerProtocolName

	m.NodeRuleGroup = dataAO6.NodeRuleGroup

	m.OwnedNodeEdgePoint = dataAO6.OwnedNodeEdgePoint

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TapiTopologyNode) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 7)

	aO0, err := swag.WriteJSON(m.TapiCommonAdminStatePac)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.TapiCommonCapacityPac)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.TapiCommonGlobalClass)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)

	aO3, err := swag.WriteJSON(m.TapiTopologyTransferCostPac)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO3)

	aO4, err := swag.WriteJSON(m.TapiTopologyTransferIntegrityPac)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO4)

	aO5, err := swag.WriteJSON(m.TapiTopologyTransferTimingPac)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO5)

	var dataAO6 struct {
		AggregatedNodeEdgePoint []string `json:"aggregated-node-edge-point"`

		EncapTopology *TapiTopologyTopologyRef `json:"encap-topology,omitempty"`

		LayerProtocolName []TapiCommonLayerProtocolName `json:"layer-protocol-name"`

		NodeRuleGroup []*TapiTopologyNodeRuleGroup `json:"node-rule-group"`

		OwnedNodeEdgePoint []*TapiTopologyNodeEdgePoint `json:"owned-node-edge-point"`
	}

	dataAO6.AggregatedNodeEdgePoint = m.AggregatedNodeEdgePoint

	dataAO6.EncapTopology = m.EncapTopology

	dataAO6.LayerProtocolName = m.LayerProtocolName

	dataAO6.NodeRuleGroup = m.NodeRuleGroup

	dataAO6.OwnedNodeEdgePoint = m.OwnedNodeEdgePoint

	jsonDataAO6, errAO6 := swag.WriteJSON(dataAO6)
	if errAO6 != nil {
		return nil, errAO6
	}
	_parts = append(_parts, jsonDataAO6)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tapi topology node
func (m *TapiTopologyNode) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TapiCommonAdminStatePac
	if err := m.TapiCommonAdminStatePac.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiCommonCapacityPac
	if err := m.TapiCommonCapacityPac.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiCommonGlobalClass
	if err := m.TapiCommonGlobalClass.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiTopologyTransferCostPac
	if err := m.TapiTopologyTransferCostPac.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiTopologyTransferIntegrityPac
	if err := m.TapiTopologyTransferIntegrityPac.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiTopologyTransferTimingPac
	if err := m.TapiTopologyTransferTimingPac.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncapTopology(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayerProtocolName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeRuleGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnedNodeEdgePoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiTopologyNode) validateEncapTopology(formats strfmt.Registry) error {

	if swag.IsZero(m.EncapTopology) { // not required
		return nil
	}

	if m.EncapTopology != nil {
		if err := m.EncapTopology.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encap-topology")
			}
			return err
		}
	}

	return nil
}

func (m *TapiTopologyNode) validateLayerProtocolName(formats strfmt.Registry) error {

	if swag.IsZero(m.LayerProtocolName) { // not required
		return nil
	}

	for i := 0; i < len(m.LayerProtocolName); i++ {

		if err := m.LayerProtocolName[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("layer-protocol-name" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TapiTopologyNode) validateNodeRuleGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeRuleGroup) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeRuleGroup); i++ {
		if swag.IsZero(m.NodeRuleGroup[i]) { // not required
			continue
		}

		if m.NodeRuleGroup[i] != nil {
			if err := m.NodeRuleGroup[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("node-rule-group" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiTopologyNode) validateOwnedNodeEdgePoint(formats strfmt.Registry) error {

	if swag.IsZero(m.OwnedNodeEdgePoint) { // not required
		return nil
	}

	for i := 0; i < len(m.OwnedNodeEdgePoint); i++ {
		if swag.IsZero(m.OwnedNodeEdgePoint[i]) { // not required
			continue
		}

		if m.OwnedNodeEdgePoint[i] != nil {
			if err := m.OwnedNodeEdgePoint[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("owned-node-edge-point" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiTopologyNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiTopologyNode) UnmarshalBinary(b []byte) error {
	var res TapiTopologyNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
