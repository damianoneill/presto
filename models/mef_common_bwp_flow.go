// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MefCommonBwpFlow mef common bwp flow
// swagger:model mef.common.BwpFlow
type MefCommonBwpFlow struct {

	// This attribute denotes the Committed Burst Size that limits the maximum number of bytes available for a burst of frames that will be declared Green, in bytes,
	Cbs int64 `json:"cbs,omitempty"`

	// This attribute denotes the Committed Information Rate that limits the average rate of frames that will be declared Green. In bits per second.
	Cir int64 `json:"cir,omitempty"`

	// This attribute denotes the maximum Committed Information Rate that limits the rate of tokens added to the committed token bucket. In bits per second.
	CirMax int64 `json:"cir-max,omitempty"`

	// This attribute denotes the Color Mode that Indicates whether the Color Identifier of the frame is considered by the Bandwidth Profile Algorithm.
	ColorMode MefCommonTypesColorMode `json:"color-mode,omitempty"`

	// This attribute denotes the Coupling Flag that Determines if overflow Green tokens can be used as Yellow tokens. FALSE for 0 (overflow green tokens are discarded) and TRUE for 1 (overflow green tokens can be used as yellow tokens)
	CouplingFlag *bool `json:"coupling-flag,omitempty"`

	// This attribute denotes the Excessive Burst Size that limits the maximum number of bytes available for a burst of frames that will be declared Yellow, in bytes.
	Ebs int64 `json:"ebs,omitempty"`

	// This attribute denotes the Excess Information Rate that limits the average rate of frames that will be declared Yellow, in bits per second.
	Eir int64 `json:"eir,omitempty"`

	// This attribute denotes the Maximum Excess Information Rate that Limits the rate of tokens added to the excess token bucket, in bits per second.
	EirMax int64 `json:"eir-max,omitempty"`

	// This attribute represents the relationship between the BwpFlow and the Envelope, indicating which Envelope the BwpFlow belongs.
	Envelope *MefCommonEnvelope `json:"envelope,omitempty"`

	// This attribute denotes the rank of the bandwidth profile flow in the envelope.
	Rank int64 `json:"rank,omitempty"`

	// This attribute adjusts the number of tokens requested for each external interface frame.
	TokenRequestOffset int64 `json:"token-request-offset,omitempty"`
}

// Validate validates this mef common bwp flow
func (m *MefCommonBwpFlow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColorMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvelope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MefCommonBwpFlow) validateColorMode(formats strfmt.Registry) error {

	if swag.IsZero(m.ColorMode) { // not required
		return nil
	}

	if err := m.ColorMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("color-mode")
		}
		return err
	}

	return nil
}

func (m *MefCommonBwpFlow) validateEnvelope(formats strfmt.Registry) error {

	if swag.IsZero(m.Envelope) { // not required
		return nil
	}

	if m.Envelope != nil {
		if err := m.Envelope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("envelope")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MefCommonBwpFlow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MefCommonBwpFlow) UnmarshalBinary(b []byte) error {
	var res MefCommonBwpFlow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
