// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiCommonBandwidthProfile tapi common bandwidth profile
// swagger:model tapi.common.BandwidthProfile
type TapiCommonBandwidthProfile struct {

	// none
	BwProfileType TapiCommonBandwidthProfileType `json:"bw-profile-type,omitempty"`

	// none
	ColorAware *bool `json:"color-aware,omitempty"`

	// none
	CommittedBurstSize *TapiCommonCapacityValue `json:"committed-burst-size,omitempty"`

	// none
	CommittedInformationRate *TapiCommonCapacityValue `json:"committed-information-rate,omitempty"`

	// none
	CouplingFlag *bool `json:"coupling-flag,omitempty"`

	// none
	PeakBurstSize *TapiCommonCapacityValue `json:"peak-burst-size,omitempty"`

	// none
	PeakInformationRate *TapiCommonCapacityValue `json:"peak-information-rate,omitempty"`
}

// Validate validates this tapi common bandwidth profile
func (m *TapiCommonBandwidthProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBwProfileType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommittedBurstSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommittedInformationRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeakBurstSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeakInformationRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiCommonBandwidthProfile) validateBwProfileType(formats strfmt.Registry) error {

	if swag.IsZero(m.BwProfileType) { // not required
		return nil
	}

	if err := m.BwProfileType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("bw-profile-type")
		}
		return err
	}

	return nil
}

func (m *TapiCommonBandwidthProfile) validateCommittedBurstSize(formats strfmt.Registry) error {

	if swag.IsZero(m.CommittedBurstSize) { // not required
		return nil
	}

	if m.CommittedBurstSize != nil {
		if err := m.CommittedBurstSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("committed-burst-size")
			}
			return err
		}
	}

	return nil
}

func (m *TapiCommonBandwidthProfile) validateCommittedInformationRate(formats strfmt.Registry) error {

	if swag.IsZero(m.CommittedInformationRate) { // not required
		return nil
	}

	if m.CommittedInformationRate != nil {
		if err := m.CommittedInformationRate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("committed-information-rate")
			}
			return err
		}
	}

	return nil
}

func (m *TapiCommonBandwidthProfile) validatePeakBurstSize(formats strfmt.Registry) error {

	if swag.IsZero(m.PeakBurstSize) { // not required
		return nil
	}

	if m.PeakBurstSize != nil {
		if err := m.PeakBurstSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peak-burst-size")
			}
			return err
		}
	}

	return nil
}

func (m *TapiCommonBandwidthProfile) validatePeakInformationRate(formats strfmt.Registry) error {

	if swag.IsZero(m.PeakInformationRate) { // not required
		return nil
	}

	if m.PeakInformationRate != nil {
		if err := m.PeakInformationRate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peak-information-rate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiCommonBandwidthProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiCommonBandwidthProfile) UnmarshalBinary(b []byte) error {
	var res TapiCommonBandwidthProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
