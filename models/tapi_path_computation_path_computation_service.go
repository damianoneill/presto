// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiPathComputationPathComputationService tapi path computation path computation service
// swagger:model tapi.path.computation.PathComputationService
type TapiPathComputationPathComputationService struct {
	TapiCommonGlobalClass

	// none
	EndPoint []*TapiPathComputationPathServiceEndPoint `json:"end-point"`

	// none
	ObjectiveFunction *TapiPathComputationPathObjectiveFunction `json:"objective-function,omitempty"`

	// none
	OptimizationConstraint *TapiPathComputationPathOptimizationConstraint `json:"optimization-constraint,omitempty"`

	// none
	Path []*TapiPathComputationPathRef `json:"path"`

	// none
	RoutingConstraint *TapiPathComputationRoutingConstraint `json:"routing-constraint,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TapiPathComputationPathComputationService) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TapiCommonGlobalClass
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TapiCommonGlobalClass = aO0

	// AO1
	var dataAO1 struct {
		EndPoint []*TapiPathComputationPathServiceEndPoint `json:"end-point"`

		ObjectiveFunction *TapiPathComputationPathObjectiveFunction `json:"objective-function,omitempty"`

		OptimizationConstraint *TapiPathComputationPathOptimizationConstraint `json:"optimization-constraint,omitempty"`

		Path []*TapiPathComputationPathRef `json:"path"`

		RoutingConstraint *TapiPathComputationRoutingConstraint `json:"routing-constraint,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.EndPoint = dataAO1.EndPoint

	m.ObjectiveFunction = dataAO1.ObjectiveFunction

	m.OptimizationConstraint = dataAO1.OptimizationConstraint

	m.Path = dataAO1.Path

	m.RoutingConstraint = dataAO1.RoutingConstraint

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TapiPathComputationPathComputationService) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.TapiCommonGlobalClass)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		EndPoint []*TapiPathComputationPathServiceEndPoint `json:"end-point"`

		ObjectiveFunction *TapiPathComputationPathObjectiveFunction `json:"objective-function,omitempty"`

		OptimizationConstraint *TapiPathComputationPathOptimizationConstraint `json:"optimization-constraint,omitempty"`

		Path []*TapiPathComputationPathRef `json:"path"`

		RoutingConstraint *TapiPathComputationRoutingConstraint `json:"routing-constraint,omitempty"`
	}

	dataAO1.EndPoint = m.EndPoint

	dataAO1.ObjectiveFunction = m.ObjectiveFunction

	dataAO1.OptimizationConstraint = m.OptimizationConstraint

	dataAO1.Path = m.Path

	dataAO1.RoutingConstraint = m.RoutingConstraint

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tapi path computation path computation service
func (m *TapiPathComputationPathComputationService) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TapiCommonGlobalClass
	if err := m.TapiCommonGlobalClass.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectiveFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptimizationConstraint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingConstraint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiPathComputationPathComputationService) validateEndPoint(formats strfmt.Registry) error {

	if swag.IsZero(m.EndPoint) { // not required
		return nil
	}

	for i := 0; i < len(m.EndPoint); i++ {
		if swag.IsZero(m.EndPoint[i]) { // not required
			continue
		}

		if m.EndPoint[i] != nil {
			if err := m.EndPoint[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("end-point" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiPathComputationPathComputationService) validateObjectiveFunction(formats strfmt.Registry) error {

	if swag.IsZero(m.ObjectiveFunction) { // not required
		return nil
	}

	if m.ObjectiveFunction != nil {
		if err := m.ObjectiveFunction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objective-function")
			}
			return err
		}
	}

	return nil
}

func (m *TapiPathComputationPathComputationService) validateOptimizationConstraint(formats strfmt.Registry) error {

	if swag.IsZero(m.OptimizationConstraint) { // not required
		return nil
	}

	if m.OptimizationConstraint != nil {
		if err := m.OptimizationConstraint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optimization-constraint")
			}
			return err
		}
	}

	return nil
}

func (m *TapiPathComputationPathComputationService) validatePath(formats strfmt.Registry) error {

	if swag.IsZero(m.Path) { // not required
		return nil
	}

	for i := 0; i < len(m.Path); i++ {
		if swag.IsZero(m.Path[i]) { // not required
			continue
		}

		if m.Path[i] != nil {
			if err := m.Path[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("path" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiPathComputationPathComputationService) validateRoutingConstraint(formats strfmt.Registry) error {

	if swag.IsZero(m.RoutingConstraint) { // not required
		return nil
	}

	if m.RoutingConstraint != nil {
		if err := m.RoutingConstraint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routing-constraint")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiPathComputationPathComputationService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiPathComputationPathComputationService) UnmarshalBinary(b []byte) error {
	var res TapiPathComputationPathComputationService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
