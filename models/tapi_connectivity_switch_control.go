// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiConnectivitySwitchControl tapi connectivity switch control
// swagger:model tapi.connectivity.SwitchControl
type TapiConnectivitySwitchControl struct {
	TapiCommonGlobalClass

	TapiConnectivityResilienceConstraint

	// none
	SubSwitchControl []*TapiConnectivitySwitchControlRef `json:"sub-switch-control"`

	// none
	Switch []*TapiConnectivitySwitch `json:"switch"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TapiConnectivitySwitchControl) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TapiCommonGlobalClass
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TapiCommonGlobalClass = aO0

	// AO1
	var aO1 TapiConnectivityResilienceConstraint
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.TapiConnectivityResilienceConstraint = aO1

	// AO2
	var dataAO2 struct {
		SubSwitchControl []*TapiConnectivitySwitchControlRef `json:"sub-switch-control"`

		Switch []*TapiConnectivitySwitch `json:"switch"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.SubSwitchControl = dataAO2.SubSwitchControl

	m.Switch = dataAO2.Switch

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TapiConnectivitySwitchControl) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.TapiCommonGlobalClass)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.TapiConnectivityResilienceConstraint)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	var dataAO2 struct {
		SubSwitchControl []*TapiConnectivitySwitchControlRef `json:"sub-switch-control"`

		Switch []*TapiConnectivitySwitch `json:"switch"`
	}

	dataAO2.SubSwitchControl = m.SubSwitchControl

	dataAO2.Switch = m.Switch

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tapi connectivity switch control
func (m *TapiConnectivitySwitchControl) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TapiCommonGlobalClass
	if err := m.TapiCommonGlobalClass.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiConnectivityResilienceConstraint
	if err := m.TapiConnectivityResilienceConstraint.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubSwitchControl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwitch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiConnectivitySwitchControl) validateSubSwitchControl(formats strfmt.Registry) error {

	if swag.IsZero(m.SubSwitchControl) { // not required
		return nil
	}

	for i := 0; i < len(m.SubSwitchControl); i++ {
		if swag.IsZero(m.SubSwitchControl[i]) { // not required
			continue
		}

		if m.SubSwitchControl[i] != nil {
			if err := m.SubSwitchControl[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sub-switch-control" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiConnectivitySwitchControl) validateSwitch(formats strfmt.Registry) error {

	if swag.IsZero(m.Switch) { // not required
		return nil
	}

	for i := 0; i < len(m.Switch); i++ {
		if swag.IsZero(m.Switch[i]) { // not required
			continue
		}

		if m.Switch[i] != nil {
			if err := m.Switch[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("switch" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiConnectivitySwitchControl) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiConnectivitySwitchControl) UnmarshalBinary(b []byte) error {
	var res TapiConnectivitySwitchControl
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
