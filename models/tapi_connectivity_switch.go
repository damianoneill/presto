// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiConnectivitySwitch tapi connectivity switch
// swagger:model tapi.connectivity.Switch
type TapiConnectivitySwitch struct {
	TapiCommonLocalClass

	// none
	SelectedConnectionEndPoint []*TapiConnectivityConnectionEndPointRef `json:"selected-connection-end-point"`

	// none
	SelectedRoute []string `json:"selected-route"`

	// Degree of administrative control applied to the switch selection.
	SelectionControl TapiConnectivitySelectionControl `json:"selection-control,omitempty"`

	// The reason for the current switch selection.
	SelectionReason TapiConnectivitySelectionReason `json:"selection-reason,omitempty"`

	// Indicates whether the switch selects from ingress to the FC or to egress of the FC, or both.
	SwitchDirection TapiCommonPortDirection `json:"switch-direction,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TapiConnectivitySwitch) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TapiCommonLocalClass
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TapiCommonLocalClass = aO0

	// AO1
	var dataAO1 struct {
		SelectedConnectionEndPoint []*TapiConnectivityConnectionEndPointRef `json:"selected-connection-end-point"`

		SelectedRoute []string `json:"selected-route"`

		SelectionControl TapiConnectivitySelectionControl `json:"selection-control,omitempty"`

		SelectionReason TapiConnectivitySelectionReason `json:"selection-reason,omitempty"`

		SwitchDirection TapiCommonPortDirection `json:"switch-direction,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.SelectedConnectionEndPoint = dataAO1.SelectedConnectionEndPoint

	m.SelectedRoute = dataAO1.SelectedRoute

	m.SelectionControl = dataAO1.SelectionControl

	m.SelectionReason = dataAO1.SelectionReason

	m.SwitchDirection = dataAO1.SwitchDirection

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TapiConnectivitySwitch) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.TapiCommonLocalClass)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		SelectedConnectionEndPoint []*TapiConnectivityConnectionEndPointRef `json:"selected-connection-end-point"`

		SelectedRoute []string `json:"selected-route"`

		SelectionControl TapiConnectivitySelectionControl `json:"selection-control,omitempty"`

		SelectionReason TapiConnectivitySelectionReason `json:"selection-reason,omitempty"`

		SwitchDirection TapiCommonPortDirection `json:"switch-direction,omitempty"`
	}

	dataAO1.SelectedConnectionEndPoint = m.SelectedConnectionEndPoint

	dataAO1.SelectedRoute = m.SelectedRoute

	dataAO1.SelectionControl = m.SelectionControl

	dataAO1.SelectionReason = m.SelectionReason

	dataAO1.SwitchDirection = m.SwitchDirection

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tapi connectivity switch
func (m *TapiConnectivitySwitch) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TapiCommonLocalClass
	if err := m.TapiCommonLocalClass.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectedConnectionEndPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectionControl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectionReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwitchDirection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiConnectivitySwitch) validateSelectedConnectionEndPoint(formats strfmt.Registry) error {

	if swag.IsZero(m.SelectedConnectionEndPoint) { // not required
		return nil
	}

	for i := 0; i < len(m.SelectedConnectionEndPoint); i++ {
		if swag.IsZero(m.SelectedConnectionEndPoint[i]) { // not required
			continue
		}

		if m.SelectedConnectionEndPoint[i] != nil {
			if err := m.SelectedConnectionEndPoint[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("selected-connection-end-point" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiConnectivitySwitch) validateSelectionControl(formats strfmt.Registry) error {

	if swag.IsZero(m.SelectionControl) { // not required
		return nil
	}

	if err := m.SelectionControl.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("selection-control")
		}
		return err
	}

	return nil
}

func (m *TapiConnectivitySwitch) validateSelectionReason(formats strfmt.Registry) error {

	if swag.IsZero(m.SelectionReason) { // not required
		return nil
	}

	if err := m.SelectionReason.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("selection-reason")
		}
		return err
	}

	return nil
}

func (m *TapiConnectivitySwitch) validateSwitchDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.SwitchDirection) { // not required
		return nil
	}

	if err := m.SwitchDirection.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("switch-direction")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiConnectivitySwitch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiConnectivitySwitch) UnmarshalBinary(b []byte) error {
	var res TapiConnectivitySwitch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
