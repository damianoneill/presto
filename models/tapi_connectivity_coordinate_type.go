// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TapiConnectivityCoordinateType tapi connectivity coordinate type
// swagger:model tapi.connectivity.CoordinateType
type TapiConnectivityCoordinateType string

const (

	// TapiConnectivityCoordinateTypeNOCOORDINATE captures enum value "NO_COORDINATE"
	TapiConnectivityCoordinateTypeNOCOORDINATE TapiConnectivityCoordinateType = "NO_COORDINATE"

	// TapiConnectivityCoordinateTypeHOLDOFFTIME captures enum value "HOLD_OFF_TIME"
	TapiConnectivityCoordinateTypeHOLDOFFTIME TapiConnectivityCoordinateType = "HOLD_OFF_TIME"

	// TapiConnectivityCoordinateTypeWAITFORNOTIFICATION captures enum value "WAIT_FOR_NOTIFICATION"
	TapiConnectivityCoordinateTypeWAITFORNOTIFICATION TapiConnectivityCoordinateType = "WAIT_FOR_NOTIFICATION"
)

// for schema
var tapiConnectivityCoordinateTypeEnum []interface{}

func init() {
	var res []TapiConnectivityCoordinateType
	if err := json.Unmarshal([]byte(`["NO_COORDINATE","HOLD_OFF_TIME","WAIT_FOR_NOTIFICATION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tapiConnectivityCoordinateTypeEnum = append(tapiConnectivityCoordinateTypeEnum, v)
	}
}

func (m TapiConnectivityCoordinateType) validateTapiConnectivityCoordinateTypeEnum(path, location string, value TapiConnectivityCoordinateType) error {
	if err := validate.Enum(path, location, value, tapiConnectivityCoordinateTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this tapi connectivity coordinate type
func (m TapiConnectivityCoordinateType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTapiConnectivityCoordinateTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
