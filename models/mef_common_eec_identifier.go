// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MefCommonEecIdentifier mef common eec identifier
// swagger:model mef.common.EecIdentifier
type MefCommonEecIdentifier struct {

	// This attribute represents the relationship between the EecIdentifier and a DscpEecIdPac when the eecMappingType of EvcEndPoint or OvcEndPoint is DSCP and the eecName is not only for L2CP.
	DscpEecIDPac []*MefCommonDscpEecIDPac `json:"dscp-eec-id-pac"`

	// This attribute denotes the Egress Equivalence Class Name that the EecIdentifier maps to.
	EecName string `json:"eec-name,omitempty"`

	// This attribute represents the relationship between the EecIdentifier and the BwpFlow, for egress bandwidth profile per EEC Name.
	EgressBwpPerEec *MefCommonBwpFlow `json:"egress-bwp-per-eec,omitempty"`

	// This attribute lists the L2CP Protocols that map to the Egress Equivalence Class Name.
	L2cpProtocolList []*MefCommonTypesL2cpProtocol `json:"l2cp-protocol-list"`

	// This attribute represents the relationship between the EecIdentifier and a PcpEecIdPac when the eecMappingType of EvcEndPoint or OvcEndPoint is PCP and the eecName is not only for L2CP.
	PcpEecIDPac *MefCommonPcpEecIDPac `json:"pcp-eec-id-pac,omitempty"`

	// This attribute represents the relationship between the EecIdentifier and a SepEecIdPac when the eecMappingType of EvcEndPoint or OvcEndPoint is END_POINT and the eecName is not only for L2CP. This not addressed in MEF 10.3 but can be future consideration.
	SepEecIDPac MefCommonSepEecIDPac `json:"sep-eec-id-pac,omitempty"`
}

// Validate validates this mef common eec identifier
func (m *MefCommonEecIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDscpEecIDPac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEgressBwpPerEec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateL2cpProtocolList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePcpEecIDPac(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MefCommonEecIdentifier) validateDscpEecIDPac(formats strfmt.Registry) error {

	if swag.IsZero(m.DscpEecIDPac) { // not required
		return nil
	}

	for i := 0; i < len(m.DscpEecIDPac); i++ {
		if swag.IsZero(m.DscpEecIDPac[i]) { // not required
			continue
		}

		if m.DscpEecIDPac[i] != nil {
			if err := m.DscpEecIDPac[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dscp-eec-id-pac" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MefCommonEecIdentifier) validateEgressBwpPerEec(formats strfmt.Registry) error {

	if swag.IsZero(m.EgressBwpPerEec) { // not required
		return nil
	}

	if m.EgressBwpPerEec != nil {
		if err := m.EgressBwpPerEec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("egress-bwp-per-eec")
			}
			return err
		}
	}

	return nil
}

func (m *MefCommonEecIdentifier) validateL2cpProtocolList(formats strfmt.Registry) error {

	if swag.IsZero(m.L2cpProtocolList) { // not required
		return nil
	}

	for i := 0; i < len(m.L2cpProtocolList); i++ {
		if swag.IsZero(m.L2cpProtocolList[i]) { // not required
			continue
		}

		if m.L2cpProtocolList[i] != nil {
			if err := m.L2cpProtocolList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("l2cp-protocol-list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MefCommonEecIdentifier) validatePcpEecIDPac(formats strfmt.Registry) error {

	if swag.IsZero(m.PcpEecIDPac) { // not required
		return nil
	}

	if m.PcpEecIDPac != nil {
		if err := m.PcpEecIDPac.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pcp-eec-id-pac")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MefCommonEecIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MefCommonEecIdentifier) UnmarshalBinary(b []byte) error {
	var res MefCommonEecIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
