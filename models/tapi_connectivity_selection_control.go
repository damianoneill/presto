// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TapiConnectivitySelectionControl tapi connectivity selection control
// swagger:model tapi.connectivity.SelectionControl
type TapiConnectivitySelectionControl string

const (

	// TapiConnectivitySelectionControlLOCKOUT captures enum value "LOCK_OUT"
	TapiConnectivitySelectionControlLOCKOUT TapiConnectivitySelectionControl = "LOCK_OUT"

	// TapiConnectivitySelectionControlNORMAL captures enum value "NORMAL"
	TapiConnectivitySelectionControlNORMAL TapiConnectivitySelectionControl = "NORMAL"

	// TapiConnectivitySelectionControlMANUAL captures enum value "MANUAL"
	TapiConnectivitySelectionControlMANUAL TapiConnectivitySelectionControl = "MANUAL"

	// TapiConnectivitySelectionControlFORCED captures enum value "FORCED"
	TapiConnectivitySelectionControlFORCED TapiConnectivitySelectionControl = "FORCED"
)

// for schema
var tapiConnectivitySelectionControlEnum []interface{}

func init() {
	var res []TapiConnectivitySelectionControl
	if err := json.Unmarshal([]byte(`["LOCK_OUT","NORMAL","MANUAL","FORCED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tapiConnectivitySelectionControlEnum = append(tapiConnectivitySelectionControlEnum, v)
	}
}

func (m TapiConnectivitySelectionControl) validateTapiConnectivitySelectionControlEnum(path, location string, value TapiConnectivitySelectionControl) error {
	if err := validate.Enum(path, location, value, tapiConnectivitySelectionControlEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this tapi connectivity selection control
func (m TapiConnectivitySelectionControl) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTapiConnectivitySelectionControlEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
