// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TapiCommonDirectiveValue tapi common directive value
// swagger:model tapi.common.DirectiveValue
type TapiCommonDirectiveValue string

const (

	// TapiCommonDirectiveValueMINIMIZE captures enum value "MINIMIZE"
	TapiCommonDirectiveValueMINIMIZE TapiCommonDirectiveValue = "MINIMIZE"

	// TapiCommonDirectiveValueMAXIMIZE captures enum value "MAXIMIZE"
	TapiCommonDirectiveValueMAXIMIZE TapiCommonDirectiveValue = "MAXIMIZE"

	// TapiCommonDirectiveValueALLOW captures enum value "ALLOW"
	TapiCommonDirectiveValueALLOW TapiCommonDirectiveValue = "ALLOW"

	// TapiCommonDirectiveValueDISALLOW captures enum value "DISALLOW"
	TapiCommonDirectiveValueDISALLOW TapiCommonDirectiveValue = "DISALLOW"

	// TapiCommonDirectiveValueDONTCARE captures enum value "DONT_CARE"
	TapiCommonDirectiveValueDONTCARE TapiCommonDirectiveValue = "DONT_CARE"
)

// for schema
var tapiCommonDirectiveValueEnum []interface{}

func init() {
	var res []TapiCommonDirectiveValue
	if err := json.Unmarshal([]byte(`["MINIMIZE","MAXIMIZE","ALLOW","DISALLOW","DONT_CARE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tapiCommonDirectiveValueEnum = append(tapiCommonDirectiveValueEnum, v)
	}
}

func (m TapiCommonDirectiveValue) validateTapiCommonDirectiveValueEnum(path, location string, value TapiCommonDirectiveValue) error {
	if err := validate.Enum(path, location, value, tapiCommonDirectiveValueEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this tapi common directive value
func (m TapiCommonDirectiveValue) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTapiCommonDirectiveValueEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
