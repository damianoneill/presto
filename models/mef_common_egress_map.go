// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MefCommonEgressMap mef common egress map
// swagger:model mef.common.EgressMap
type MefCommonEgressMap struct {

	// This attribute represents the relationship between the EgressMap and the CosNameAndColorToDeiPac (representing the attribute set for using CoS Name and ingress color to egress DEI mapping).
	CosNameAndColorToDeiPacList []*MefCommonCosNameAndColorToDeiPac `json:"cos-name-and-color-to-dei-pac-list"`

	// This attribute represents the relationship between the EgressMap and the CosNameAndColorToPcpPac (representing the attribute set for using CoS Name and ingress color to egress PCP mapping).
	CosNameAndColorToPcpPacList []*MefCommonCosNameAndColorToPcpPac `json:"cos-name-and-color-to-pcp-pac-list"`

	// This attribute represents the relationship between the EgressMap and the CosNameToPcpPac (representing the attribute set for using CoS Name to egress PCP mapping).
	CosNameToPcpPacList []*MefCommonCosNameToPcpPac `json:"cos-name-to-pcp-pac-list"`

	// This attribute determines which form to take to apply for egress frame color indication, among CoS name and Ingress Color to C-Tag PCP, or CoS name and Ingress Color to S-Tag PCP, or CoS Name and Ingress Color to C-Tag DEI, or CoS Name and Ingress Color to S-Tag DEI, or CoS Name to C-Tag PCP, or CoS Name to S-Tag PCP.
	EgressMapType MefCommonTypesEgressMapType `json:"egress-map-type,omitempty"`
}

// Validate validates this mef common egress map
func (m *MefCommonEgressMap) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCosNameAndColorToDeiPacList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCosNameAndColorToPcpPacList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCosNameToPcpPacList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEgressMapType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MefCommonEgressMap) validateCosNameAndColorToDeiPacList(formats strfmt.Registry) error {

	if swag.IsZero(m.CosNameAndColorToDeiPacList) { // not required
		return nil
	}

	for i := 0; i < len(m.CosNameAndColorToDeiPacList); i++ {
		if swag.IsZero(m.CosNameAndColorToDeiPacList[i]) { // not required
			continue
		}

		if m.CosNameAndColorToDeiPacList[i] != nil {
			if err := m.CosNameAndColorToDeiPacList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cos-name-and-color-to-dei-pac-list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MefCommonEgressMap) validateCosNameAndColorToPcpPacList(formats strfmt.Registry) error {

	if swag.IsZero(m.CosNameAndColorToPcpPacList) { // not required
		return nil
	}

	for i := 0; i < len(m.CosNameAndColorToPcpPacList); i++ {
		if swag.IsZero(m.CosNameAndColorToPcpPacList[i]) { // not required
			continue
		}

		if m.CosNameAndColorToPcpPacList[i] != nil {
			if err := m.CosNameAndColorToPcpPacList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cos-name-and-color-to-pcp-pac-list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MefCommonEgressMap) validateCosNameToPcpPacList(formats strfmt.Registry) error {

	if swag.IsZero(m.CosNameToPcpPacList) { // not required
		return nil
	}

	for i := 0; i < len(m.CosNameToPcpPacList); i++ {
		if swag.IsZero(m.CosNameToPcpPacList[i]) { // not required
			continue
		}

		if m.CosNameToPcpPacList[i] != nil {
			if err := m.CosNameToPcpPacList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cos-name-to-pcp-pac-list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MefCommonEgressMap) validateEgressMapType(formats strfmt.Registry) error {

	if swag.IsZero(m.EgressMapType) { // not required
		return nil
	}

	if err := m.EgressMapType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("egress-map-type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MefCommonEgressMap) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MefCommonEgressMap) UnmarshalBinary(b []byte) error {
	var res MefCommonEgressMap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
