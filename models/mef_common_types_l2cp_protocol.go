// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MefCommonTypesL2cpProtocol mef common types l2cp protocol
// swagger:model mef.common.types.L2cpProtocol
type MefCommonTypesL2cpProtocol struct {

	// This attribute specifies the type of L2CP protocol, i.e., LLC or EtherType.
	L2cpProtocolType MefCommonTypesL2cpProtocolType `json:"l2cp-protocol-type,omitempty"`

	// This attribute specifies the LLC address or the EtherType value.
	LlcAddressOrEtherType int64 `json:"llc-address-or-ether-type,omitempty"`

	// This attribute specifies the subtype of the L2CP protocol.
	SubType int64 `json:"sub-type,omitempty"`
}

// Validate validates this mef common types l2cp protocol
func (m *MefCommonTypesL2cpProtocol) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateL2cpProtocolType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MefCommonTypesL2cpProtocol) validateL2cpProtocolType(formats strfmt.Registry) error {

	if swag.IsZero(m.L2cpProtocolType) { // not required
		return nil
	}

	if err := m.L2cpProtocolType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("l2cp-protocol-type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MefCommonTypesL2cpProtocol) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MefCommonTypesL2cpProtocol) UnmarshalBinary(b []byte) error {
	var res MefCommonTypesL2cpProtocol
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
