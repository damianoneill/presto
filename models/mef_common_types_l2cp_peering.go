// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MefCommonTypesL2cpPeering mef common types l2cp peering
// swagger:model mef.common.types.L2cpPeering
type MefCommonTypesL2cpPeering struct {

	// This is a Mac Address.
	DestinationAddress int64 `json:"destination-address,omitempty"`

	// It is possible that a protocol (e.g. ESMC) could operate on some, but not all, of the physical
	//                     links. When linkId is not listed, the protocol peering applies to all members of the aggregation link.
	LinkIDList []int64 `json:"link-id-list"`

	// This is a L2CP Protocol Identifier.
	ProtocolID *MefCommonTypesL2cpProtocol `json:"protocol-id,omitempty"`
}

// Validate validates this mef common types l2cp peering
func (m *MefCommonTypesL2cpPeering) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtocolID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MefCommonTypesL2cpPeering) validateProtocolID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProtocolID) { // not required
		return nil
	}

	if m.ProtocolID != nil {
		if err := m.ProtocolID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protocol-id")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MefCommonTypesL2cpPeering) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MefCommonTypesL2cpPeering) UnmarshalBinary(b []byte) error {
	var res MefCommonTypesL2cpPeering
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
