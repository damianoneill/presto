// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiTopologyLink tapi topology link
// swagger:model tapi.topology.Link
type TapiTopologyLink struct {
	TapiCommonAdminStatePac

	TapiCommonCapacityPac

	TapiCommonGlobalClass

	TapiTopologyLayerProtocolTransitionPac

	TapiTopologyRiskParameterPac

	TapiTopologyTransferCostPac

	TapiTopologyTransferIntegrityPac

	TapiTopologyTransferTimingPac

	TapiTopologyValidationPac

	// The directionality of the Link.
	//                     Is applicable to simple Links where all LinkEnds are BIDIRECTIONAL (the Link will be BIDIRECTIONAL) or UNIDIRECTIONAL (the Link will be UNIDIRECTIONAL).
	//                     Is not present in more complex cases.
	Direction TapiCommonForwardingDirection `json:"direction,omitempty"`

	// none
	LayerProtocolName []TapiCommonLayerProtocolName `json:"layer-protocol-name"`

	// none
	NodeEdgePoint []*TapiTopologyOwnedNodeEdgePointRef `json:"node-edge-point"`

	// none
	ResilienceType *TapiTopologyResilienceType `json:"resilience-type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TapiTopologyLink) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TapiCommonAdminStatePac
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TapiCommonAdminStatePac = aO0

	// AO1
	var aO1 TapiCommonCapacityPac
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.TapiCommonCapacityPac = aO1

	// AO2
	var aO2 TapiCommonGlobalClass
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.TapiCommonGlobalClass = aO2

	// AO3
	var aO3 TapiTopologyLayerProtocolTransitionPac
	if err := swag.ReadJSON(raw, &aO3); err != nil {
		return err
	}
	m.TapiTopologyLayerProtocolTransitionPac = aO3

	// AO4
	var aO4 TapiTopologyRiskParameterPac
	if err := swag.ReadJSON(raw, &aO4); err != nil {
		return err
	}
	m.TapiTopologyRiskParameterPac = aO4

	// AO5
	var aO5 TapiTopologyTransferCostPac
	if err := swag.ReadJSON(raw, &aO5); err != nil {
		return err
	}
	m.TapiTopologyTransferCostPac = aO5

	// AO6
	var aO6 TapiTopologyTransferIntegrityPac
	if err := swag.ReadJSON(raw, &aO6); err != nil {
		return err
	}
	m.TapiTopologyTransferIntegrityPac = aO6

	// AO7
	var aO7 TapiTopologyTransferTimingPac
	if err := swag.ReadJSON(raw, &aO7); err != nil {
		return err
	}
	m.TapiTopologyTransferTimingPac = aO7

	// AO8
	var aO8 TapiTopologyValidationPac
	if err := swag.ReadJSON(raw, &aO8); err != nil {
		return err
	}
	m.TapiTopologyValidationPac = aO8

	// AO9
	var dataAO9 struct {
		Direction TapiCommonForwardingDirection `json:"direction,omitempty"`

		LayerProtocolName []TapiCommonLayerProtocolName `json:"layer-protocol-name"`

		NodeEdgePoint []*TapiTopologyOwnedNodeEdgePointRef `json:"node-edge-point"`

		ResilienceType *TapiTopologyResilienceType `json:"resilience-type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO9); err != nil {
		return err
	}

	m.Direction = dataAO9.Direction

	m.LayerProtocolName = dataAO9.LayerProtocolName

	m.NodeEdgePoint = dataAO9.NodeEdgePoint

	m.ResilienceType = dataAO9.ResilienceType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TapiTopologyLink) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 10)

	aO0, err := swag.WriteJSON(m.TapiCommonAdminStatePac)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.TapiCommonCapacityPac)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.TapiCommonGlobalClass)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)

	aO3, err := swag.WriteJSON(m.TapiTopologyLayerProtocolTransitionPac)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO3)

	aO4, err := swag.WriteJSON(m.TapiTopologyRiskParameterPac)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO4)

	aO5, err := swag.WriteJSON(m.TapiTopologyTransferCostPac)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO5)

	aO6, err := swag.WriteJSON(m.TapiTopologyTransferIntegrityPac)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO6)

	aO7, err := swag.WriteJSON(m.TapiTopologyTransferTimingPac)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO7)

	aO8, err := swag.WriteJSON(m.TapiTopologyValidationPac)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO8)

	var dataAO9 struct {
		Direction TapiCommonForwardingDirection `json:"direction,omitempty"`

		LayerProtocolName []TapiCommonLayerProtocolName `json:"layer-protocol-name"`

		NodeEdgePoint []*TapiTopologyOwnedNodeEdgePointRef `json:"node-edge-point"`

		ResilienceType *TapiTopologyResilienceType `json:"resilience-type,omitempty"`
	}

	dataAO9.Direction = m.Direction

	dataAO9.LayerProtocolName = m.LayerProtocolName

	dataAO9.NodeEdgePoint = m.NodeEdgePoint

	dataAO9.ResilienceType = m.ResilienceType

	jsonDataAO9, errAO9 := swag.WriteJSON(dataAO9)
	if errAO9 != nil {
		return nil, errAO9
	}
	_parts = append(_parts, jsonDataAO9)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tapi topology link
func (m *TapiTopologyLink) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TapiCommonAdminStatePac
	if err := m.TapiCommonAdminStatePac.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiCommonCapacityPac
	if err := m.TapiCommonCapacityPac.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiCommonGlobalClass
	if err := m.TapiCommonGlobalClass.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiTopologyLayerProtocolTransitionPac
	if err := m.TapiTopologyLayerProtocolTransitionPac.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiTopologyRiskParameterPac
	if err := m.TapiTopologyRiskParameterPac.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiTopologyTransferCostPac
	if err := m.TapiTopologyTransferCostPac.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiTopologyTransferIntegrityPac
	if err := m.TapiTopologyTransferIntegrityPac.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiTopologyTransferTimingPac
	if err := m.TapiTopologyTransferTimingPac.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiTopologyValidationPac
	if err := m.TapiTopologyValidationPac.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayerProtocolName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeEdgePoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResilienceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiTopologyLink) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	if err := m.Direction.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("direction")
		}
		return err
	}

	return nil
}

func (m *TapiTopologyLink) validateLayerProtocolName(formats strfmt.Registry) error {

	if swag.IsZero(m.LayerProtocolName) { // not required
		return nil
	}

	for i := 0; i < len(m.LayerProtocolName); i++ {

		if err := m.LayerProtocolName[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("layer-protocol-name" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TapiTopologyLink) validateNodeEdgePoint(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeEdgePoint) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeEdgePoint); i++ {
		if swag.IsZero(m.NodeEdgePoint[i]) { // not required
			continue
		}

		if m.NodeEdgePoint[i] != nil {
			if err := m.NodeEdgePoint[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("node-edge-point" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiTopologyLink) validateResilienceType(formats strfmt.Registry) error {

	if swag.IsZero(m.ResilienceType) { // not required
		return nil
	}

	if m.ResilienceType != nil {
		if err := m.ResilienceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resilience-type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiTopologyLink) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiTopologyLink) UnmarshalBinary(b []byte) error {
	var res TapiTopologyLink
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
