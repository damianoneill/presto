// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NrmConnectivityVlanIDListAndUntag nrm connectivity vlan Id list and untag
// swagger:model nrm.connectivity.VlanIdListAndUntag
type NrmConnectivityVlanIDListAndUntag struct {

	// If true, then untagged and priority tagged frames are included in the mapping, otherwise not.
	UntaggedAndPrioTaggedIncluded *bool `json:"untagged-and-prio-tagged-included,omitempty"`

	// This is for VLAN ID from 1 to 4094
	VlanID []*MefCommonTypesVlanID `json:"vlan-id"`

	// Type=LIST: all listed VLAN IDs. Type=EXCEPT: all VLAN IDs except the listed ones. Type=ALL, all VLAN IDs, hence vlanId list is not applicable.
	VlanIDMappingType MefCommonTypesVlanIDMappingType `json:"vlan-id-mapping-type,omitempty"`
}

// Validate validates this nrm connectivity vlan Id list and untag
func (m *NrmConnectivityVlanIDListAndUntag) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanIDMappingType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NrmConnectivityVlanIDListAndUntag) validateVlanID(formats strfmt.Registry) error {

	if swag.IsZero(m.VlanID) { // not required
		return nil
	}

	for i := 0; i < len(m.VlanID); i++ {
		if swag.IsZero(m.VlanID[i]) { // not required
			continue
		}

		if m.VlanID[i] != nil {
			if err := m.VlanID[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vlan-id" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NrmConnectivityVlanIDListAndUntag) validateVlanIDMappingType(formats strfmt.Registry) error {

	if swag.IsZero(m.VlanIDMappingType) { // not required
		return nil
	}

	if err := m.VlanIDMappingType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vlan-id-mapping-type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NrmConnectivityVlanIDListAndUntag) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NrmConnectivityVlanIDListAndUntag) UnmarshalBinary(b []byte) error {
	var res NrmConnectivityVlanIDListAndUntag
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
