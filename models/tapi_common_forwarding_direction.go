// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TapiCommonForwardingDirection tapi common forwarding direction
// swagger:model tapi.common.ForwardingDirection
type TapiCommonForwardingDirection string

const (

	// TapiCommonForwardingDirectionBIDIRECTIONAL captures enum value "BIDIRECTIONAL"
	TapiCommonForwardingDirectionBIDIRECTIONAL TapiCommonForwardingDirection = "BIDIRECTIONAL"

	// TapiCommonForwardingDirectionUNIDIRECTIONAL captures enum value "UNIDIRECTIONAL"
	TapiCommonForwardingDirectionUNIDIRECTIONAL TapiCommonForwardingDirection = "UNIDIRECTIONAL"

	// TapiCommonForwardingDirectionUNDEFINEDORUNKNOWN captures enum value "UNDEFINED_OR_UNKNOWN"
	TapiCommonForwardingDirectionUNDEFINEDORUNKNOWN TapiCommonForwardingDirection = "UNDEFINED_OR_UNKNOWN"
)

// for schema
var tapiCommonForwardingDirectionEnum []interface{}

func init() {
	var res []TapiCommonForwardingDirection
	if err := json.Unmarshal([]byte(`["BIDIRECTIONAL","UNIDIRECTIONAL","UNDEFINED_OR_UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tapiCommonForwardingDirectionEnum = append(tapiCommonForwardingDirectionEnum, v)
	}
}

func (m TapiCommonForwardingDirection) validateTapiCommonForwardingDirectionEnum(path, location string, value TapiCommonForwardingDirection) error {
	if err := validate.Enum(path, location, value, tapiCommonForwardingDirectionEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this tapi common forwarding direction
func (m TapiCommonForwardingDirection) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTapiCommonForwardingDirectionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
