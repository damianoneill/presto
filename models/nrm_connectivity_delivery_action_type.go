// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// NrmConnectivityDeliveryActionType nrm connectivity delivery action type
// swagger:model nrm.connectivity.DeliveryActionType
type NrmConnectivityDeliveryActionType string

const (

	// NrmConnectivityDeliveryActionTypeDISCARD captures enum value "DISCARD"
	NrmConnectivityDeliveryActionTypeDISCARD NrmConnectivityDeliveryActionType = "DISCARD"

	// NrmConnectivityDeliveryActionTypeCONDITIONALLY captures enum value "CONDITIONALLY"
	NrmConnectivityDeliveryActionTypeCONDITIONALLY NrmConnectivityDeliveryActionType = "CONDITIONALLY"

	// NrmConnectivityDeliveryActionTypeUNCONDITIONALLY captures enum value "UNCONDITIONALLY"
	NrmConnectivityDeliveryActionTypeUNCONDITIONALLY NrmConnectivityDeliveryActionType = "UNCONDITIONALLY"
)

// for schema
var nrmConnectivityDeliveryActionTypeEnum []interface{}

func init() {
	var res []NrmConnectivityDeliveryActionType
	if err := json.Unmarshal([]byte(`["DISCARD","CONDITIONALLY","UNCONDITIONALLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nrmConnectivityDeliveryActionTypeEnum = append(nrmConnectivityDeliveryActionTypeEnum, v)
	}
}

func (m NrmConnectivityDeliveryActionType) validateNrmConnectivityDeliveryActionTypeEnum(path, location string, value NrmConnectivityDeliveryActionType) error {
	if err := validate.Enum(path, location, value, nrmConnectivityDeliveryActionTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this nrm connectivity delivery action type
func (m NrmConnectivityDeliveryActionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNrmConnectivityDeliveryActionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
