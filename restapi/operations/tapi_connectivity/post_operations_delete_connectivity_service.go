// Code generated by go-swagger; DO NOT EDIT.

package tapi_connectivity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostOperationsDeleteConnectivityServiceHandlerFunc turns a function with the right signature into a post operations delete connectivity service handler
type PostOperationsDeleteConnectivityServiceHandlerFunc func(PostOperationsDeleteConnectivityServiceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostOperationsDeleteConnectivityServiceHandlerFunc) Handle(params PostOperationsDeleteConnectivityServiceParams) middleware.Responder {
	return fn(params)
}

// PostOperationsDeleteConnectivityServiceHandler interface for that can handle valid post operations delete connectivity service params
type PostOperationsDeleteConnectivityServiceHandler interface {
	Handle(PostOperationsDeleteConnectivityServiceParams) middleware.Responder
}

// NewPostOperationsDeleteConnectivityService creates a new http.Handler for the post operations delete connectivity service operation
func NewPostOperationsDeleteConnectivityService(ctx *middleware.Context, handler PostOperationsDeleteConnectivityServiceHandler) *PostOperationsDeleteConnectivityService {
	return &PostOperationsDeleteConnectivityService{Context: ctx, Handler: handler}
}

/*PostOperationsDeleteConnectivityService swagger:route POST /operations/delete-connectivity-service/ tapi-connectivity postOperationsDeleteConnectivityService

PostOperationsDeleteConnectivityService post operations delete connectivity service API

*/
type PostOperationsDeleteConnectivityService struct {
	Context *middleware.Context
	Handler PostOperationsDeleteConnectivityServiceHandler
}

func (o *PostOperationsDeleteConnectivityService) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostOperationsDeleteConnectivityServiceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
