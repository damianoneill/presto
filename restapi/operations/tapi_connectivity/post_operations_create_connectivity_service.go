// Code generated by go-swagger; DO NOT EDIT.

package tapi_connectivity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostOperationsCreateConnectivityServiceHandlerFunc turns a function with the right signature into a post operations create connectivity service handler
type PostOperationsCreateConnectivityServiceHandlerFunc func(PostOperationsCreateConnectivityServiceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostOperationsCreateConnectivityServiceHandlerFunc) Handle(params PostOperationsCreateConnectivityServiceParams) middleware.Responder {
	return fn(params)
}

// PostOperationsCreateConnectivityServiceHandler interface for that can handle valid post operations create connectivity service params
type PostOperationsCreateConnectivityServiceHandler interface {
	Handle(PostOperationsCreateConnectivityServiceParams) middleware.Responder
}

// NewPostOperationsCreateConnectivityService creates a new http.Handler for the post operations create connectivity service operation
func NewPostOperationsCreateConnectivityService(ctx *middleware.Context, handler PostOperationsCreateConnectivityServiceHandler) *PostOperationsCreateConnectivityService {
	return &PostOperationsCreateConnectivityService{Context: ctx, Handler: handler}
}

/*PostOperationsCreateConnectivityService swagger:route POST /operations/create-connectivity-service/ tapi-connectivity postOperationsCreateConnectivityService

PostOperationsCreateConnectivityService post operations create connectivity service API

*/
type PostOperationsCreateConnectivityService struct {
	Context *middleware.Context
	Handler PostOperationsCreateConnectivityServiceHandler
}

func (o *PostOperationsCreateConnectivityService) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostOperationsCreateConnectivityServiceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
