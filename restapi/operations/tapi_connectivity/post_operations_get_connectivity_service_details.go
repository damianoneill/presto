// Code generated by go-swagger; DO NOT EDIT.

package tapi_connectivity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostOperationsGetConnectivityServiceDetailsHandlerFunc turns a function with the right signature into a post operations get connectivity service details handler
type PostOperationsGetConnectivityServiceDetailsHandlerFunc func(PostOperationsGetConnectivityServiceDetailsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostOperationsGetConnectivityServiceDetailsHandlerFunc) Handle(params PostOperationsGetConnectivityServiceDetailsParams) middleware.Responder {
	return fn(params)
}

// PostOperationsGetConnectivityServiceDetailsHandler interface for that can handle valid post operations get connectivity service details params
type PostOperationsGetConnectivityServiceDetailsHandler interface {
	Handle(PostOperationsGetConnectivityServiceDetailsParams) middleware.Responder
}

// NewPostOperationsGetConnectivityServiceDetails creates a new http.Handler for the post operations get connectivity service details operation
func NewPostOperationsGetConnectivityServiceDetails(ctx *middleware.Context, handler PostOperationsGetConnectivityServiceDetailsHandler) *PostOperationsGetConnectivityServiceDetails {
	return &PostOperationsGetConnectivityServiceDetails{Context: ctx, Handler: handler}
}

/*PostOperationsGetConnectivityServiceDetails swagger:route POST /operations/get-connectivity-service-details/ tapi-connectivity postOperationsGetConnectivityServiceDetails

PostOperationsGetConnectivityServiceDetails post operations get connectivity service details API

*/
type PostOperationsGetConnectivityServiceDetails struct {
	Context *middleware.Context
	Handler PostOperationsGetConnectivityServiceDetailsHandler
}

func (o *PostOperationsGetConnectivityServiceDetails) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostOperationsGetConnectivityServiceDetailsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
