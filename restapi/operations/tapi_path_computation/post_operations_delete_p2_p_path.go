// Code generated by go-swagger; DO NOT EDIT.

package tapi_path_computation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostOperationsDeleteP2PPathHandlerFunc turns a function with the right signature into a post operations delete p2 p path handler
type PostOperationsDeleteP2PPathHandlerFunc func(PostOperationsDeleteP2PPathParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostOperationsDeleteP2PPathHandlerFunc) Handle(params PostOperationsDeleteP2PPathParams) middleware.Responder {
	return fn(params)
}

// PostOperationsDeleteP2PPathHandler interface for that can handle valid post operations delete p2 p path params
type PostOperationsDeleteP2PPathHandler interface {
	Handle(PostOperationsDeleteP2PPathParams) middleware.Responder
}

// NewPostOperationsDeleteP2PPath creates a new http.Handler for the post operations delete p2 p path operation
func NewPostOperationsDeleteP2PPath(ctx *middleware.Context, handler PostOperationsDeleteP2PPathHandler) *PostOperationsDeleteP2PPath {
	return &PostOperationsDeleteP2PPath{Context: ctx, Handler: handler}
}

/*PostOperationsDeleteP2PPath swagger:route POST /operations/delete-p-2-p-path/ tapi-path-computation postOperationsDeleteP2PPath

PostOperationsDeleteP2PPath post operations delete p2 p path API

*/
type PostOperationsDeleteP2PPath struct {
	Context *middleware.Context
	Handler PostOperationsDeleteP2PPathHandler
}

func (o *PostOperationsDeleteP2PPath) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostOperationsDeleteP2PPathParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
