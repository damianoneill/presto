// Code generated by go-swagger; DO NOT EDIT.

package tapi_path_computation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostOperationsComputeP2PPathHandlerFunc turns a function with the right signature into a post operations compute p2 p path handler
type PostOperationsComputeP2PPathHandlerFunc func(PostOperationsComputeP2PPathParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostOperationsComputeP2PPathHandlerFunc) Handle(params PostOperationsComputeP2PPathParams) middleware.Responder {
	return fn(params)
}

// PostOperationsComputeP2PPathHandler interface for that can handle valid post operations compute p2 p path params
type PostOperationsComputeP2PPathHandler interface {
	Handle(PostOperationsComputeP2PPathParams) middleware.Responder
}

// NewPostOperationsComputeP2PPath creates a new http.Handler for the post operations compute p2 p path operation
func NewPostOperationsComputeP2PPath(ctx *middleware.Context, handler PostOperationsComputeP2PPathHandler) *PostOperationsComputeP2PPath {
	return &PostOperationsComputeP2PPath{Context: ctx, Handler: handler}
}

/*PostOperationsComputeP2PPath swagger:route POST /operations/compute-p-2-p-path/ tapi-path-computation postOperationsComputeP2PPath

PostOperationsComputeP2PPath post operations compute p2 p path API

*/
type PostOperationsComputeP2PPath struct {
	Context *middleware.Context
	Handler PostOperationsComputeP2PPathHandler
}

func (o *PostOperationsComputeP2PPath) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostOperationsComputeP2PPathParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
