// Code generated by go-swagger; DO NOT EDIT.

package tapi_topology

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostOperationsGetTopologyListHandlerFunc turns a function with the right signature into a post operations get topology list handler
type PostOperationsGetTopologyListHandlerFunc func(PostOperationsGetTopologyListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostOperationsGetTopologyListHandlerFunc) Handle(params PostOperationsGetTopologyListParams) middleware.Responder {
	return fn(params)
}

// PostOperationsGetTopologyListHandler interface for that can handle valid post operations get topology list params
type PostOperationsGetTopologyListHandler interface {
	Handle(PostOperationsGetTopologyListParams) middleware.Responder
}

// NewPostOperationsGetTopologyList creates a new http.Handler for the post operations get topology list operation
func NewPostOperationsGetTopologyList(ctx *middleware.Context, handler PostOperationsGetTopologyListHandler) *PostOperationsGetTopologyList {
	return &PostOperationsGetTopologyList{Context: ctx, Handler: handler}
}

/*PostOperationsGetTopologyList swagger:route POST /operations/get-topology-list/ tapi-topology postOperationsGetTopologyList

PostOperationsGetTopologyList post operations get topology list API

*/
type PostOperationsGetTopologyList struct {
	Context *middleware.Context
	Handler PostOperationsGetTopologyListHandler
}

func (o *PostOperationsGetTopologyList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostOperationsGetTopologyListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
