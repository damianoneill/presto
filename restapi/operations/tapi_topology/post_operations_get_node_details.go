// Code generated by go-swagger; DO NOT EDIT.

package tapi_topology

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostOperationsGetNodeDetailsHandlerFunc turns a function with the right signature into a post operations get node details handler
type PostOperationsGetNodeDetailsHandlerFunc func(PostOperationsGetNodeDetailsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostOperationsGetNodeDetailsHandlerFunc) Handle(params PostOperationsGetNodeDetailsParams) middleware.Responder {
	return fn(params)
}

// PostOperationsGetNodeDetailsHandler interface for that can handle valid post operations get node details params
type PostOperationsGetNodeDetailsHandler interface {
	Handle(PostOperationsGetNodeDetailsParams) middleware.Responder
}

// NewPostOperationsGetNodeDetails creates a new http.Handler for the post operations get node details operation
func NewPostOperationsGetNodeDetails(ctx *middleware.Context, handler PostOperationsGetNodeDetailsHandler) *PostOperationsGetNodeDetails {
	return &PostOperationsGetNodeDetails{Context: ctx, Handler: handler}
}

/*PostOperationsGetNodeDetails swagger:route POST /operations/get-node-details/ tapi-topology postOperationsGetNodeDetails

PostOperationsGetNodeDetails post operations get node details API

*/
type PostOperationsGetNodeDetails struct {
	Context *middleware.Context
	Handler PostOperationsGetNodeDetailsHandler
}

func (o *PostOperationsGetNodeDetails) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostOperationsGetNodeDetailsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
