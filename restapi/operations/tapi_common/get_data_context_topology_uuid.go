// Code generated by go-swagger; DO NOT EDIT.

package tapi_common

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetDataContextTopologyUUIDHandlerFunc turns a function with the right signature into a get data context topology UUID handler
type GetDataContextTopologyUUIDHandlerFunc func(GetDataContextTopologyUUIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDataContextTopologyUUIDHandlerFunc) Handle(params GetDataContextTopologyUUIDParams) middleware.Responder {
	return fn(params)
}

// GetDataContextTopologyUUIDHandler interface for that can handle valid get data context topology UUID params
type GetDataContextTopologyUUIDHandler interface {
	Handle(GetDataContextTopologyUUIDParams) middleware.Responder
}

// NewGetDataContextTopologyUUID creates a new http.Handler for the get data context topology UUID operation
func NewGetDataContextTopologyUUID(ctx *middleware.Context, handler GetDataContextTopologyUUIDHandler) *GetDataContextTopologyUUID {
	return &GetDataContextTopologyUUID{Context: ctx, Handler: handler}
}

/*GetDataContextTopologyUUID swagger:route GET /data/context/topology={uuid}/ tapi-common getDataContextTopologyUuid

returns tapi.topology.Topology

*/
type GetDataContextTopologyUUID struct {
	Context *middleware.Context
	Handler GetDataContextTopologyUUIDHandler
}

func (o *GetDataContextTopologyUUID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetDataContextTopologyUUIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
