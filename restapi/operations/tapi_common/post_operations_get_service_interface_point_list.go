// Code generated by go-swagger; DO NOT EDIT.

package tapi_common

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostOperationsGetServiceInterfacePointListHandlerFunc turns a function with the right signature into a post operations get service interface point list handler
type PostOperationsGetServiceInterfacePointListHandlerFunc func(PostOperationsGetServiceInterfacePointListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostOperationsGetServiceInterfacePointListHandlerFunc) Handle(params PostOperationsGetServiceInterfacePointListParams) middleware.Responder {
	return fn(params)
}

// PostOperationsGetServiceInterfacePointListHandler interface for that can handle valid post operations get service interface point list params
type PostOperationsGetServiceInterfacePointListHandler interface {
	Handle(PostOperationsGetServiceInterfacePointListParams) middleware.Responder
}

// NewPostOperationsGetServiceInterfacePointList creates a new http.Handler for the post operations get service interface point list operation
func NewPostOperationsGetServiceInterfacePointList(ctx *middleware.Context, handler PostOperationsGetServiceInterfacePointListHandler) *PostOperationsGetServiceInterfacePointList {
	return &PostOperationsGetServiceInterfacePointList{Context: ctx, Handler: handler}
}

/*PostOperationsGetServiceInterfacePointList swagger:route POST /operations/get-service-interface-point-list/ tapi-common postOperationsGetServiceInterfacePointList

PostOperationsGetServiceInterfacePointList post operations get service interface point list API

*/
type PostOperationsGetServiceInterfacePointList struct {
	Context *middleware.Context
	Handler PostOperationsGetServiceInterfacePointListHandler
}

func (o *PostOperationsGetServiceInterfacePointList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostOperationsGetServiceInterfacePointListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
