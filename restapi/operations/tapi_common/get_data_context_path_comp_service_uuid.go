// Code generated by go-swagger; DO NOT EDIT.

package tapi_common

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetDataContextPathCompServiceUUIDHandlerFunc turns a function with the right signature into a get data context path comp service UUID handler
type GetDataContextPathCompServiceUUIDHandlerFunc func(GetDataContextPathCompServiceUUIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDataContextPathCompServiceUUIDHandlerFunc) Handle(params GetDataContextPathCompServiceUUIDParams) middleware.Responder {
	return fn(params)
}

// GetDataContextPathCompServiceUUIDHandler interface for that can handle valid get data context path comp service UUID params
type GetDataContextPathCompServiceUUIDHandler interface {
	Handle(GetDataContextPathCompServiceUUIDParams) middleware.Responder
}

// NewGetDataContextPathCompServiceUUID creates a new http.Handler for the get data context path comp service UUID operation
func NewGetDataContextPathCompServiceUUID(ctx *middleware.Context, handler GetDataContextPathCompServiceUUIDHandler) *GetDataContextPathCompServiceUUID {
	return &GetDataContextPathCompServiceUUID{Context: ctx, Handler: handler}
}

/*GetDataContextPathCompServiceUUID swagger:route GET /data/context/path-comp-service={uuid}/ tapi-common getDataContextPathCompServiceUuid

returns tapi.path.computation.PathComputationService

*/
type GetDataContextPathCompServiceUUID struct {
	Context *middleware.Context
	Handler GetDataContextPathCompServiceUUIDHandler
}

func (o *GetDataContextPathCompServiceUUID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetDataContextPathCompServiceUUIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
