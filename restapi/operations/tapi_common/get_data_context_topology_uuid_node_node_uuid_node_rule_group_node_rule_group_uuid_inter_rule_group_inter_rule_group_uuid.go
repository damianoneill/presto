// Code generated by go-swagger; DO NOT EDIT.

package tapi_common

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetDataContextTopologyUUIDNodeNodeUUIDNodeRuleGroupNodeRuleGroupUUIDInterRuleGroupInterRuleGroupUUIDHandlerFunc turns a function with the right signature into a get data context topology UUID node node UUID node rule group node rule group UUID inter rule group inter rule group UUID handler
type GetDataContextTopologyUUIDNodeNodeUUIDNodeRuleGroupNodeRuleGroupUUIDInterRuleGroupInterRuleGroupUUIDHandlerFunc func(GetDataContextTopologyUUIDNodeNodeUUIDNodeRuleGroupNodeRuleGroupUUIDInterRuleGroupInterRuleGroupUUIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDataContextTopologyUUIDNodeNodeUUIDNodeRuleGroupNodeRuleGroupUUIDInterRuleGroupInterRuleGroupUUIDHandlerFunc) Handle(params GetDataContextTopologyUUIDNodeNodeUUIDNodeRuleGroupNodeRuleGroupUUIDInterRuleGroupInterRuleGroupUUIDParams) middleware.Responder {
	return fn(params)
}

// GetDataContextTopologyUUIDNodeNodeUUIDNodeRuleGroupNodeRuleGroupUUIDInterRuleGroupInterRuleGroupUUIDHandler interface for that can handle valid get data context topology UUID node node UUID node rule group node rule group UUID inter rule group inter rule group UUID params
type GetDataContextTopologyUUIDNodeNodeUUIDNodeRuleGroupNodeRuleGroupUUIDInterRuleGroupInterRuleGroupUUIDHandler interface {
	Handle(GetDataContextTopologyUUIDNodeNodeUUIDNodeRuleGroupNodeRuleGroupUUIDInterRuleGroupInterRuleGroupUUIDParams) middleware.Responder
}

// NewGetDataContextTopologyUUIDNodeNodeUUIDNodeRuleGroupNodeRuleGroupUUIDInterRuleGroupInterRuleGroupUUID creates a new http.Handler for the get data context topology UUID node node UUID node rule group node rule group UUID inter rule group inter rule group UUID operation
func NewGetDataContextTopologyUUIDNodeNodeUUIDNodeRuleGroupNodeRuleGroupUUIDInterRuleGroupInterRuleGroupUUID(ctx *middleware.Context, handler GetDataContextTopologyUUIDNodeNodeUUIDNodeRuleGroupNodeRuleGroupUUIDInterRuleGroupInterRuleGroupUUIDHandler) *GetDataContextTopologyUUIDNodeNodeUUIDNodeRuleGroupNodeRuleGroupUUIDInterRuleGroupInterRuleGroupUUID {
	return &GetDataContextTopologyUUIDNodeNodeUUIDNodeRuleGroupNodeRuleGroupUUIDInterRuleGroupInterRuleGroupUUID{Context: ctx, Handler: handler}
}

/*GetDataContextTopologyUUIDNodeNodeUUIDNodeRuleGroupNodeRuleGroupUUIDInterRuleGroupInterRuleGroupUUID swagger:route GET /data/context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/ tapi-common getDataContextTopologyUuidNodeNodeUuidNodeRuleGroupNodeRuleGroupUuidInterRuleGroupInterRuleGroupUuid

returns tapi.topology.InterRuleGroup

*/
type GetDataContextTopologyUUIDNodeNodeUUIDNodeRuleGroupNodeRuleGroupUUIDInterRuleGroupInterRuleGroupUUID struct {
	Context *middleware.Context
	Handler GetDataContextTopologyUUIDNodeNodeUUIDNodeRuleGroupNodeRuleGroupUUIDInterRuleGroupInterRuleGroupUUIDHandler
}

func (o *GetDataContextTopologyUUIDNodeNodeUUIDNodeRuleGroupNodeRuleGroupUUIDInterRuleGroupInterRuleGroupUUID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetDataContextTopologyUUIDNodeNodeUUIDNodeRuleGroupNodeRuleGroupUUIDInterRuleGroupInterRuleGroupUUIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
