// Code generated by go-swagger; DO NOT EDIT.

package tapi_common

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetDataContextConnectivityServiceUUIDHandlerFunc turns a function with the right signature into a get data context connectivity service UUID handler
type GetDataContextConnectivityServiceUUIDHandlerFunc func(GetDataContextConnectivityServiceUUIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDataContextConnectivityServiceUUIDHandlerFunc) Handle(params GetDataContextConnectivityServiceUUIDParams) middleware.Responder {
	return fn(params)
}

// GetDataContextConnectivityServiceUUIDHandler interface for that can handle valid get data context connectivity service UUID params
type GetDataContextConnectivityServiceUUIDHandler interface {
	Handle(GetDataContextConnectivityServiceUUIDParams) middleware.Responder
}

// NewGetDataContextConnectivityServiceUUID creates a new http.Handler for the get data context connectivity service UUID operation
func NewGetDataContextConnectivityServiceUUID(ctx *middleware.Context, handler GetDataContextConnectivityServiceUUIDHandler) *GetDataContextConnectivityServiceUUID {
	return &GetDataContextConnectivityServiceUUID{Context: ctx, Handler: handler}
}

/*GetDataContextConnectivityServiceUUID swagger:route GET /data/context/connectivity-service={uuid}/ tapi-common getDataContextConnectivityServiceUuid

returns tapi.connectivity.connectivitycontext.ConnectivityService

*/
type GetDataContextConnectivityServiceUUID struct {
	Context *middleware.Context
	Handler GetDataContextConnectivityServiceUUIDHandler
}

func (o *GetDataContextConnectivityServiceUUID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetDataContextConnectivityServiceUUIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
