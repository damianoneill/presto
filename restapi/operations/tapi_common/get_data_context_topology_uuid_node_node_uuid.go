// Code generated by go-swagger; DO NOT EDIT.

package tapi_common

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetDataContextTopologyUUIDNodeNodeUUIDHandlerFunc turns a function with the right signature into a get data context topology UUID node node UUID handler
type GetDataContextTopologyUUIDNodeNodeUUIDHandlerFunc func(GetDataContextTopologyUUIDNodeNodeUUIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDataContextTopologyUUIDNodeNodeUUIDHandlerFunc) Handle(params GetDataContextTopologyUUIDNodeNodeUUIDParams) middleware.Responder {
	return fn(params)
}

// GetDataContextTopologyUUIDNodeNodeUUIDHandler interface for that can handle valid get data context topology UUID node node UUID params
type GetDataContextTopologyUUIDNodeNodeUUIDHandler interface {
	Handle(GetDataContextTopologyUUIDNodeNodeUUIDParams) middleware.Responder
}

// NewGetDataContextTopologyUUIDNodeNodeUUID creates a new http.Handler for the get data context topology UUID node node UUID operation
func NewGetDataContextTopologyUUIDNodeNodeUUID(ctx *middleware.Context, handler GetDataContextTopologyUUIDNodeNodeUUIDHandler) *GetDataContextTopologyUUIDNodeNodeUUID {
	return &GetDataContextTopologyUUIDNodeNodeUUID{Context: ctx, Handler: handler}
}

/*GetDataContextTopologyUUIDNodeNodeUUID swagger:route GET /data/context/topology={uuid}/node={node-uuid}/ tapi-common getDataContextTopologyUuidNodeNodeUuid

returns tapi.topology.topology.Node

*/
type GetDataContextTopologyUUIDNodeNodeUUID struct {
	Context *middleware.Context
	Handler GetDataContextTopologyUUIDNodeNodeUUIDHandler
}

func (o *GetDataContextTopologyUUIDNodeNodeUUID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetDataContextTopologyUUIDNodeNodeUUIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
